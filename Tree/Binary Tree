class Node {
    int key;
    Node left;
    Node right;
    Node (int k) {
        key = k;
    }
    
}
public class Test {
    void inorder(Node root) {
        if (root != null) {
            inorder(root.left);
            System.out.print(root.key + "->");
            inorder(root.right);
        }
    }
    void preorder(Node root) {
        if (root != null) {
            System.out.print(root.key + "->");
            preorder(root.left);
            preorder(root.right);
        }
    }
    void postorder(Node root) {
        if (root != null) {
            postorder(root.left);
            postorder(root.right);
            System.out.print(root.key + "->");
            
        }
    }
    int height(Node root) {
        if (root ==  null) {
            return 0;
        }
        else {
            return Math.max(height(root.left),height(root.right)) + 1;
        }
    }
    
    public static void main(String args[]){
        Node root = new Node(10);
        root.left = new Node(20);
        root.right = new Node(30);
        root.right.left = new Node(50);
        Test t = new Test();
        System.out.println("Inorder");
        t.inorder(root);
        System.out.println("\npreorder");
        t.preorder(root);
        System.out.println("\npostorder");
        t.postorder(root);
        System.out.println("");
        System.out.println("Height of Tree:"+t.height(root));
        while(root.left != null) {
            System.out.println(root.key);
            root = root.right;
        }
    }
}
